{
  "name": "Synacor Challenge",
  "tagline": "Solution to Synacor Challenge written in k4",
  "body": "# Synacor Challenge\r\n\r\n## The Challenge\r\n\r\nGiven a [binary file](challenge.bin) and\r\n[architecture specification](arch-spec) implement a\r\n[virtual machine](vm.k) to execute the binary and solve the\r\n[challenges](https://challenge.synacor.com/) that lie within.\r\n\r\n## The Solution\r\n\r\nThis solution was implemented in\r\n[k4](https://en.wikipedia.org/wiki/K_(programming_language)) (the\r\nunderlying language of the more popular/verbose\r\n[q](https://en.wikipedia.org/wiki/Q_(programming_language_from_Kx_Systems)))\r\n\r\nThe solution can be run by starting the virtual machine with the\r\n[q binary](https://kx.com/software-download.php) and passing an\r\noptional file listing the commands to run.  If no file is provided,\r\n[commands.txt](commands.txt) is used.\r\n\r\n```sh\r\n$ q vm.k [commands.txt]\r\n```\r\nTo issue `k` (instead of `q`) commands to the interpreter, we must\r\ntype an initial backslash\r\n\r\n```q\r\nq)\\\r\n\r\n```\r\n\r\n## The Design\r\n\r\n### memory\r\n\r\nThe challenge defines three types of memory:\r\n\r\n1. memory with 15-bit address space storing 16-bit values\r\n2. eight registers\r\n3. an unbounded stack which holds individual 16-bit values\r\n\r\nThis specification allows us to model memory as a single integer\r\nvector where:\r\n\r\n- the first 32768 addresses are reserved for opcodes loaded from the\r\n  [binary](challenge.bin)\r\n- the next eight addresses (32769-32776) are reserved for the\r\n  registers\r\n- and all remaining elements, dynamically appended or dropped, are\r\n  used for the stack\r\n\r\nThis solution stores the vector of bytes in the variable `b`.\r\n\r\n### addresses\r\n\r\nThe opcodes loaded from the [binary](challenge.bin) are 16-bit values\r\nstored as little-endian pairs (low byte, high byte). Under normal\r\nconditions, we would load the file with a single call to\r\n[1:](http://code.kx.com/wiki/Reference/OneColon):\r\n\r\n```k\r\n  *(1#\"h\";1#2)1:`challenge.bin\r\n21 21 19 87 19 101 19 108 19 99 19 111 19 109 19 101 19 32 19 116 19 111 19 3..\r\n```\r\n\r\nBut this assumes the 16-bit values are signed values that range from\r\n-32,768 through 32,767.\r\n\r\n`K` does not have an unsigned integer data type. At first glance, this\r\ndoes not seems to matter because the specification states that literal\r\nvalues range from 0 - 32,767.  But the eight registers are referenced\r\nwith values between 32768 - 32775. We must therefore load the bytes as\r\n32-bit integers. To do this, we reshape the byte vector into pairs of\r\nbytes, pad each pair with 2 extra bytes `0x0000`, and convert the\r\nresulting 8-byte vectors into a 32-bit integers.\r\n\r\n```k\r\n  |(0x0/:0x0000,)'0N 2#|1:`challenge.bin\r\n21 21 19 87 19 101 19 108 19 99 19 111 19 109 19 101 19 32 19 116 19 111 19 3..\r\n```\r\n\r\nThe final step pads the vector to address 32,775 so the stack can\r\nbegin at address 32,776.\r\n\r\n```k\r\n  32776#|(32776#0i),(0x0/:0x0000,)'0N 2#|1:`challenge.bin\r\n21 21 19 87 19 101 19 108 19 99 19 111 19 109 19 101 19 32 19 116 19 111 19 3..\r\n```\r\n\r\n### opcodes\r\n\r\nAll operations are implemented to accept a single memory address as\r\ninput and return the next executable address as output.  For example,\r\nthe `jt` opcode (jump to address located in x+1 if the value in\r\naddress x is true, and x+2 otherwise) is defined as:\r\n\r\n```k\r\nJT:{$[G x;G x+1;x+2]}\r\n```\r\n\r\nTo map the opcodes (which range in value from 0 through 21) to\r\noperators, we construct a vector of operator names. This\r\nsolution stores them in the variable `o`.\r\n\r\n```k\r\no:`HALT`SET`PUSH`POP`EQ`GT`JMP`JT`JF`ADD`MULT`MOD`AND`OR`NOT`RMEM`WMEM`CALL`RET`OUT`IN`NOOP\r\n```\r\n\r\nIndexing into `o` produces the correct operator name, which `k` allows\r\nus to use in-place of the actual operator. `K` will perform the lookup\r\nfor us.\r\n\r\n### execution\r\n\r\nWe define the operator `E` to accept an address which is used to query\r\nthe opcode for the next operation.  The operator is obtained and\r\npassed the next address.\r\n\r\n```k\r\nE:{o[G x]x+1}\r\n```\r\n\r\nForcing operators to accept (and return) an address allows us to execute\r\na single operation,\r\n\r\n```k\r\n  E 1\r\n2\r\n```\r\n\r\na set number of operations by iterating with a numeric left operand,\r\n\r\n```k\r\n  35 E/ 1\r\nWelcome to the Synacor Challenge!\r\n70\r\n```\r\n\r\nor a variable number of operations by iterating with a condition as\r\nthe left operand.\r\n\r\n```k\r\n  (~0=) E/ 1\r\n```\r\n\r\nIn this case, operations are executed until the address returned is 0\r\n(which we have designed the `halt` operator to return). We can start\r\nthe iteration at address 1 and safely rely on 0 to terminate the\r\niteration because the opcode in the first address is defined as\r\n`noop`.\r\n\r\n### debugging\r\n\r\nIt is often necessary to view the values stored in the eight registers\r\nas well as those on the stack. Two\r\n[views](http://code.kx.com/wiki/Views) are defined to make this\r\neasier: `REG` and `STACK`.\r\n\r\n```k\r\n  REG\r\n25975 25974 26006 0 101 0 0 25734i\r\n  STACK\r\n6080 16 6124 1 2826 32 3 6 101 0i\r\n```\r\n## The Puzzles\r\n\r\nThe challenge begins by performing a self-test to exercise each of the\r\noperators.  Passing this stage is an accomplishment in and of itself.\r\nBut the challenge hasn't even begun.  I will, of course, leave that to\r\nyou.\r\n\r\nYou must discover (and submit) 8 codes to complete the challenge. The\r\nfirst code can be found in the\r\n[architecture specification](arch-spec).  The second code is displayed\r\nafter implementing opcodes 0, 19 and 21 (as suggested in the\r\nspecification). Successfully implementing the remaining opcodes\r\nreveals the third code.\r\n\r\nFive more codes are discovered by solving the remaining puzzles:\r\n\r\n- the maze\r\n- the ruins\r\n- the teleporter\r\n- the vault\r\n- the mirror\r\n\r\n\r\n## The Prize\r\n\r\nThe challenge was designed to attract competent programmers.\r\nSuccessfully completing the challenge may get you an interview at\r\nSynacor.  For me, completing the challenge was prize enough. The\r\nclosing [screenshot](Screen Shot 2016-01-16 at 9.37.19 AM.png) is an\r\nawesome souvenir.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}